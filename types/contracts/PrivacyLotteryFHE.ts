/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface PrivacyLotteryFHEInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "createLottery"
      | "decryptWinnerIndex"
      | "drawWinner"
      | "enterLottery"
      | "getLotteryState"
      | "getParticipantsCount"
      | "getPrizeDescription"
      | "lotteries"
      | "lotteryCounter"
      | "participantAddresses"
      | "participants"
      | "protocolId"
      | "requestWinnerDecryption"
      | "revealWinner"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DecryptionFulfilled"
      | "LotteryCreated"
      | "ParticipantEntered"
      | "WinnerDrawn"
      | "WinnerRevealed"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "createLottery",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "decryptWinnerIndex",
    values: [BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "drawWinner",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "enterLottery",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getLotteryState",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getParticipantsCount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPrizeDescription",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lotteries",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lotteryCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "participantAddresses",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "participants",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "protocolId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestWinnerDecryption",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revealWinner",
    values: [BigNumberish, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "createLottery",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decryptWinnerIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "drawWinner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "enterLottery",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLotteryState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getParticipantsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPrizeDescription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lotteries", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lotteryCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "participantAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "participants",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "protocolId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "requestWinnerDecryption",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revealWinner",
    data: BytesLike
  ): Result;
}

export namespace DecryptionFulfilledEvent {
  export type InputTuple = [requestID: BigNumberish];
  export type OutputTuple = [requestID: bigint];
  export interface OutputObject {
    requestID: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LotteryCreatedEvent {
  export type InputTuple = [
    lotteryId: BigNumberish,
    creator: AddressLike,
    prizeDescription: string,
    deadline: BigNumberish
  ];
  export type OutputTuple = [
    lotteryId: bigint,
    creator: string,
    prizeDescription: string,
    deadline: bigint
  ];
  export interface OutputObject {
    lotteryId: bigint;
    creator: string;
    prizeDescription: string;
    deadline: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ParticipantEnteredEvent {
  export type InputTuple = [lotteryId: BigNumberish, participant: AddressLike];
  export type OutputTuple = [lotteryId: bigint, participant: string];
  export interface OutputObject {
    lotteryId: bigint;
    participant: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WinnerDrawnEvent {
  export type InputTuple = [lotteryId: BigNumberish];
  export type OutputTuple = [lotteryId: bigint];
  export interface OutputObject {
    lotteryId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WinnerRevealedEvent {
  export type InputTuple = [lotteryId: BigNumberish, winner: AddressLike];
  export type OutputTuple = [lotteryId: bigint, winner: string];
  export interface OutputObject {
    lotteryId: bigint;
    winner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PrivacyLotteryFHE extends BaseContract {
  connect(runner?: ContractRunner | null): PrivacyLotteryFHE;
  waitForDeployment(): Promise<this>;

  interface: PrivacyLotteryFHEInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createLottery: TypedContractMethod<
    [_prizeDescription: string, _deadline: BigNumberish],
    [void],
    "nonpayable"
  >;

  decryptWinnerIndex: TypedContractMethod<
    [requestId: BigNumberish, cleartexts: BytesLike, proof: BytesLike],
    [void],
    "nonpayable"
  >;

  drawWinner: TypedContractMethod<
    [lotteryId: BigNumberish, encryptedRandomSeed: BytesLike],
    [void],
    "nonpayable"
  >;

  enterLottery: TypedContractMethod<
    [lotteryId: BigNumberish, commitmentHash: BytesLike],
    [void],
    "nonpayable"
  >;

  getLotteryState: TypedContractMethod<
    [lotteryId: BigNumberish],
    [bigint],
    "view"
  >;

  getParticipantsCount: TypedContractMethod<
    [lotteryId: BigNumberish],
    [bigint],
    "view"
  >;

  getPrizeDescription: TypedContractMethod<
    [lotteryId: BigNumberish],
    [string],
    "view"
  >;

  lotteries: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, bigint, string, string, string, bigint] & {
        creator: string;
        prizeDescription: string;
        deadline: bigint;
        state: bigint;
        encryptedParticipantCount: string;
        encryptedRandomSeed: string;
        winner: string;
        decryptedWinnerIndex: bigint;
      }
    ],
    "view"
  >;

  lotteryCounter: TypedContractMethod<[], [bigint], "view">;

  participantAddresses: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [string],
    "view"
  >;

  participants: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [[string, boolean] & { commitmentHash: string; isRevealed: boolean }],
    "view"
  >;

  protocolId: TypedContractMethod<[], [bigint], "view">;

  requestWinnerDecryption: TypedContractMethod<
    [lotteryId: BigNumberish],
    [void],
    "nonpayable"
  >;

  revealWinner: TypedContractMethod<
    [lotteryId: BigNumberish, salt: BytesLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createLottery"
  ): TypedContractMethod<
    [_prizeDescription: string, _deadline: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "decryptWinnerIndex"
  ): TypedContractMethod<
    [requestId: BigNumberish, cleartexts: BytesLike, proof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "drawWinner"
  ): TypedContractMethod<
    [lotteryId: BigNumberish, encryptedRandomSeed: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "enterLottery"
  ): TypedContractMethod<
    [lotteryId: BigNumberish, commitmentHash: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getLotteryState"
  ): TypedContractMethod<[lotteryId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getParticipantsCount"
  ): TypedContractMethod<[lotteryId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPrizeDescription"
  ): TypedContractMethod<[lotteryId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "lotteries"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, bigint, string, string, string, bigint] & {
        creator: string;
        prizeDescription: string;
        deadline: bigint;
        state: bigint;
        encryptedParticipantCount: string;
        encryptedRandomSeed: string;
        winner: string;
        decryptedWinnerIndex: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "lotteryCounter"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "participantAddresses"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "participants"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [[string, boolean] & { commitmentHash: string; isRevealed: boolean }],
    "view"
  >;
  getFunction(
    nameOrSignature: "protocolId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "requestWinnerDecryption"
  ): TypedContractMethod<[lotteryId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revealWinner"
  ): TypedContractMethod<
    [lotteryId: BigNumberish, salt: BytesLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "DecryptionFulfilled"
  ): TypedContractEvent<
    DecryptionFulfilledEvent.InputTuple,
    DecryptionFulfilledEvent.OutputTuple,
    DecryptionFulfilledEvent.OutputObject
  >;
  getEvent(
    key: "LotteryCreated"
  ): TypedContractEvent<
    LotteryCreatedEvent.InputTuple,
    LotteryCreatedEvent.OutputTuple,
    LotteryCreatedEvent.OutputObject
  >;
  getEvent(
    key: "ParticipantEntered"
  ): TypedContractEvent<
    ParticipantEnteredEvent.InputTuple,
    ParticipantEnteredEvent.OutputTuple,
    ParticipantEnteredEvent.OutputObject
  >;
  getEvent(
    key: "WinnerDrawn"
  ): TypedContractEvent<
    WinnerDrawnEvent.InputTuple,
    WinnerDrawnEvent.OutputTuple,
    WinnerDrawnEvent.OutputObject
  >;
  getEvent(
    key: "WinnerRevealed"
  ): TypedContractEvent<
    WinnerRevealedEvent.InputTuple,
    WinnerRevealedEvent.OutputTuple,
    WinnerRevealedEvent.OutputObject
  >;

  filters: {
    "DecryptionFulfilled(uint256)": TypedContractEvent<
      DecryptionFulfilledEvent.InputTuple,
      DecryptionFulfilledEvent.OutputTuple,
      DecryptionFulfilledEvent.OutputObject
    >;
    DecryptionFulfilled: TypedContractEvent<
      DecryptionFulfilledEvent.InputTuple,
      DecryptionFulfilledEvent.OutputTuple,
      DecryptionFulfilledEvent.OutputObject
    >;

    "LotteryCreated(uint256,address,string,uint256)": TypedContractEvent<
      LotteryCreatedEvent.InputTuple,
      LotteryCreatedEvent.OutputTuple,
      LotteryCreatedEvent.OutputObject
    >;
    LotteryCreated: TypedContractEvent<
      LotteryCreatedEvent.InputTuple,
      LotteryCreatedEvent.OutputTuple,
      LotteryCreatedEvent.OutputObject
    >;

    "ParticipantEntered(uint256,address)": TypedContractEvent<
      ParticipantEnteredEvent.InputTuple,
      ParticipantEnteredEvent.OutputTuple,
      ParticipantEnteredEvent.OutputObject
    >;
    ParticipantEntered: TypedContractEvent<
      ParticipantEnteredEvent.InputTuple,
      ParticipantEnteredEvent.OutputTuple,
      ParticipantEnteredEvent.OutputObject
    >;

    "WinnerDrawn(uint256)": TypedContractEvent<
      WinnerDrawnEvent.InputTuple,
      WinnerDrawnEvent.OutputTuple,
      WinnerDrawnEvent.OutputObject
    >;
    WinnerDrawn: TypedContractEvent<
      WinnerDrawnEvent.InputTuple,
      WinnerDrawnEvent.OutputTuple,
      WinnerDrawnEvent.OutputObject
    >;

    "WinnerRevealed(uint256,address)": TypedContractEvent<
      WinnerRevealedEvent.InputTuple,
      WinnerRevealedEvent.OutputTuple,
      WinnerRevealedEvent.OutputObject
    >;
    WinnerRevealed: TypedContractEvent<
      WinnerRevealedEvent.InputTuple,
      WinnerRevealedEvent.OutputTuple,
      WinnerRevealedEvent.OutputObject
    >;
  };
}
